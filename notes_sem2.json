{
    "data": [
        {
            "question": "What is an array?",
            "answer": "An array in C is a collection of elements of the same data type, stored in contiguous memory locations, and can be accessed through a common name. It allows us to store multiple values of the same data type in a single variable. An array is indexed, meaning each element in the array has a unique index or position number, starting from 0. Arrays in C are useful for organizing and processing large amounts of data efficiently.",
            "code": "#include <stdio.h>\n\nint main()\n{\n    // Declare an array of integers with size 5\n    int numbers[5];\n\n    // Assign values to the elements of the array\n    numbers[0] = 10;\n    numbers[1] = 20;\n    numbers[2] = 30;\n    numbers[3] = 40;\n    numbers[4] = 50;\n\n    // Access elements of the array and print their values\n    printf(\"First element of the array: %d\\n\", numbers[0]);\n    printf(\"Second element of the array: %d\\n\", numbers[1]);\n    printf(\"Third element of the array: %d\\n\", numbers[2]);\n    printf(\"Fourth element of the array: %d\\n\", numbers[3]);\n    printf(\"Fifth element of the array: %d\\n\", numbers[4]);\n\n    return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What are one dimensional and two dimensional array?",
            "answer": "In C programming, arrays are used to store multiple values in a single variable. An array is a collection of elements of the same data type, stored in contiguous memory locations.\n\nA one-dimensional array is a linear arrangement of elements, where each element can be accessed by a single index. It is declared by specifying the type of elements it holds and the number of elements it can store within square brackets [].\n\nA two-dimensional array, on the other hand, is an array of arrays and is used to represent tables or matrices. It can be thought of as a grid with rows and columns, where each element can be accessed by its row and column indices.",
            "code": "#include <stdio.h>\n\nint main()\n{\n  // Declare a one-dimensional array of integers with 5 elements\n  int oneDimensionalArray[5];\n  \n  // Assign values to the elements of the one-dimensional array\n  oneDimensionalArray[0] = 10;\n  oneDimensionalArray[1] = 20;\n  oneDimensionalArray[2] = 30;\n  oneDimensionalArray[3] = 40;\n  oneDimensionalArray[4] = 50;\n  \n  // Print the values of the elements of the one-dimensional array\n  printf(\"One-Dimensional Array:\\n\");\n  for (int i = 0; i < 5; i++) {\n    printf(\"%d \", oneDimensionalArray[i]);\n  }\n  printf(\"\\n\");\n  \n  // Declare a two-dimensional array of integers with 2 rows and 3 columns\n  int twoDimensionalArray[2][3];\n  \n  // Assign values to the elements of the two-dimensional array\n  twoDimensionalArray[0][0] = 1;\n  twoDimensionalArray[0][1] = 2;\n  twoDimensionalArray[0][2] = 3;\n  twoDimensionalArray[1][0] = 4;\n  twoDimensionalArray[1][1] = 5;\n  twoDimensionalArray[1][2] = 6;\n  \n  // Print the values of the elements of the two-dimensional array\n  printf(\"Two-Dimensional Array:\\n\");\n  for (int i = 0; i < 2; i++) {\n    for (int j = 0; j < 3; j++) {\n      printf(\"%d \", twoDimensionalArray[i][j]);\n    }\n    printf(\"\\n\");\n  }\n  \n  return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What are pointers?",
            "answer": "In the C programming language, a pointer is a variable that holds the memory address of another variable. Pointers allow a program to access memory directly and perform operations on it. Pointers are declared using the \"*\" operator.\n\nPointers are an essential feature of C, and they are used in various operations such as dynamic memory allocation, passing arguments to functions by reference, and creating data structures such as linked lists and trees.",
            "code": "#include <stdio.h>\n\nint main() {\n    int x = 42; // Declare an integer variable x and initialize it to 42\n\n    int *ptr; // Declare a pointer to an integer\n\n    ptr = &x; // Store the address of x in ptr\n\n    printf(\"Value of x: %d\\n\", x); // Print the value of x\n    printf(\"Address of x: %p\\n\", &x); // Print the address of x\n    printf(\"Value of ptr: %p\\n\", ptr); // Print the value stored in ptr (i.e. the address of x)\n    printf(\"Value pointed by ptr: %d\\n\", *ptr); // Print the value pointed by ptr (i.e. the value of x)\n\n    *ptr = 25; // Modify the value pointed by ptr (i.e. the value of x)\n\n    printf(\"Value of x after modification: %d\\n\", x); // Print the updated value of x\n\n    return 0;\n}",
            "compile": false
        },
        {
            "question": "What is dynamic memory allocation?",
            "answer": "Dynamic memory allocation in C refers to the process of allocating memory during runtime, rather than at compile time. This allows for the creation of variable-size data structures, such as arrays and linked lists, and allows for the allocation of more memory when needed, improving the efficiency of the program. Functions such as malloc(), calloc(), realloc(), and free() are used to dynamically allocate and deallocate memory in C.",
            "code": "",
            "compile": null
        },
        {
            "question": "What is malloc function?",
            "answer": "malloc is a function in the C Standard Library that dynamically allocates memory in the heap. It stands for \"memory allocation.\"\n\nThe malloc function takes a single argument, the number of bytes of memory to allocate, and returns a pointer to the first byte of the newly allocated memory block. The pointer can be used to store data. If the memory allocation request is successful, malloc returns a non-NULL pointer. If the memory allocation fails, malloc returns a NULL pointer.",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  // Declare a variable to store the number of elements\n  int n = 5;\n\n  // Declare a pointer to store the address of the dynamically allocated memory\n  int *ptr;\n\n  // Allocate memory for n integers\n  ptr = (int*)malloc(n * sizeof(int));\n\n  // Check if the memory allocation was successful\n  if (ptr == NULL) {\n    // If the memory allocation failed, print an error message and exit the program\n    printf(\"Memory allocation failed.\\n\");\n    exit(1);\n  }\n\n  // Use the memory to store values\n  for (int i = 0; i < n; i++) {\n    ptr[i] = i + 1;\n  }\n\n  // Print the values stored in the memory\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", ptr[i]);\n  }\n  printf(\"\\n\");\n\n  // Free the memory after use\n  free(ptr);\n\n  return 0;\n}",
            "compile": false
        },
        {
            "question": "What is calloc function?",
            "answer": "calloc is a function in the C Standard Library that dynamically allocates memory in the heap and initializes the memory to zero. It stands for \"contiguous allocation.\"\n\nThe calloc function takes two arguments: the number of elements to allocate memory for, and the size of each element. The function returns a pointer to the first byte of the newly allocated and initialized memory block. If the memory allocation request is successful, calloc returns a non-NULL pointer. If the memory allocation fails, calloc returns a NULL pointer.",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  int n = 5; // number of elements to allocate memory for\n  int *ptr;  // pointer to int\n\n  // Allocate memory for n integers and initialize to zero\n  ptr = (int*)calloc(n, sizeof(int)); \n  \n  // Check if memory allocation failed\n  if (ptr == NULL) { \n    printf(\"Memory allocation failed.\\n\");\n    exit(1); // exit program with failure status\n  }\n\n  // Use the memory to store values\n  for (int i = 0; i < n; i++) {\n    ptr[i] = i + 1;\n  }\n\n  // Print the values stored in the memory\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", ptr[i]);\n  }\n  printf(\"\\n\");\n\n  // Free the memory after use\n  free(ptr);\n\n  return 0; // program completed successfully\n}",
            "compile": false
        },
        {
            "question": "What is realloc function?",
            "answer": "The realloc function is a C Standard Library function used to dynamically change the size of a previously allocated memory block. It stands for \"reallocate.\" The realloc function takes two arguments: a pointer to the previously allocated memory block, and the new size to allocate for the memory block.\n\nThe realloc function works by copying the contents of the old memory block to a new memory block with the specified size. If the new memory block is larger than the old memory block, the newly allocated memory is uninitialized. If the new memory block is smaller than the old memory block, the contents of the new memory block are a subset of the contents of the old memory block. The old memory block is freed after the contents are copied to the new memory block.",
            "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  int n = 5; // number of elements to allocate memory for\n  int *ptr;  // pointer to int\n\n  // Allocate memory for n integers\n  ptr = (int*)malloc(n * sizeof(int)); \n  \n  // Check if memory allocation failed\n  if (ptr == NULL) { \n    printf(\"Memory allocation failed.\\n\");\n    exit(1); // exit program with failure status\n  }\n\n  // Use the memory to store values\n  for (int i = 0; i < n; i++) {\n    ptr[i] = i + 1;\n  }\n\n  // Print the values stored in the memory\n  printf(\"Original values: \");\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", ptr[i]);\n  }\n  printf(\"\\n\");\n\n  // Reallocate memory to increase size\n  n = 10; // new number of elements to allocate memory for\n  ptr = (int*)realloc(ptr, n * sizeof(int));\n  \n  // Check if reallocation failed\n  if (ptr == NULL) {\n    printf(\"Reallocation failed.\\n\");\n    exit(1); // exit program with failure status\n  }\n\n  // Use the additional memory to store values\n  for (int i = 5; i < n; i++) {\n    ptr[i] = i + 1;\n  }\n\n  // Print the values stored in the memory after reallocation\n  printf(\"New values: \");\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", ptr[i]);\n  }\n  printf(\"\\n\");\n\n  // Free the memory after use\n  free(ptr);\n\n  return 0; // program completed successfully\n}",
            "compile": false
        },
        {
            "question": "What are functions?",
            "answer": "In C, functions are self-contained blocks of code that perform a specific task. Functions help to organize and structure a program by breaking it down into smaller, reusable parts. Functions allow for code reuse, which makes writing and maintaining large programs easier.\n\nFunctions can be called from within the main program or from other functions. To call a function, its name is followed by a set of parentheses that may contain arguments. The function is executed when it is called, and it returns a value to the calling function if a value is specified in the return statement.\n\nFunctions in C provide modularity, code reuse, and improved program structure, and are an essential part of C programming.",
            "code": "#include <stdio.h>\n\n// Declare a function that takes two integers as arguments and returns their sum\nint add(int a, int b) {\n  return a + b;\n}\n\n// Declare a function that takes two integers as arguments and returns their product\nint multiply(int a, int b) {\n  return a * b;\n}\n\nint main()\n{\n  // Call the add function and store the result in a variable\n  int result1 = add(10, 20);\n  \n  // Call the multiply function and store the result in a variable\n  int result2 = multiply(30, 40);\n  \n  // Print the results of the functions\n  printf(\"Addition Result: %d\\n\", result1);\n  printf(\"Multiplication Result: %d\\n\", result2);\n  \n  return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What is sorting?",
            "answer": "Sorting in C is the process of arranging the elements of an array or a data structure in a particular order, such as ascending or descending. The purpose of sorting is to arrange the data in a way that makes it easier to search, analyze, and manipulate.\n\nThere are many different algorithms for sorting, including bubble sort, selection sort, insertion sort, merge sort, and quick sort, each with its own strengths and weaknesses. The choice of which sorting algorithm to use depends on the specific requirements of the task at hand, such as the size of the data, the number of elements to be sorted, and the desired performance characteristics.",
            "code": "",
            "compile": false
        },
        {
            "question": "What is bubble sort?",
            "answer": "Bubble sort is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.",
            "code": "#include <stdio.h>\n\n// Function to implement bubble sort\nvoid bubbleSort(int arr[], int n) {\n  \n  int i, j; // Declare variables to be used in the for loops\n\n  // Loop through the array n-1 times\n  for (i = 0; i < n-1; i++) {\n\n    // Compare adjacent elements and swap if they are in the wrong order\n    for (j = 0; j < n-i-1; j++) {\n\n      // If the current element is greater than the next element, swap them\n      if (arr[j] > arr[j+1]) {\n        int temp = arr[j]; // Temporarily store the current element\n        arr[j] = arr[j+1]; // Swap the current element with the next element\n        arr[j+1] = temp; // Store the temporarily stored element in its new position\n      }\n    }\n  }\n}\n\nint main()\n{\n  int arr[5] = {20, 10, 30, 50, 40}; // Declare an array of integers\n\n  int n = sizeof(arr) / sizeof(arr[0]); // Get the number of elements in the array\n\n  printf(\"Original Array:\\n\"); // Print the original array\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n\n  bubbleSort(arr, n); // Sort the array using bubble sort\n\n  printf(\"Sorted Array:\\n\"); // Print the sorted array\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n\n  return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What is selection sort?",
            "answer": "Selection sort is a simple sorting algorithm in C that works by repeatedly finding the minimum element from the unsorted part of the array and swapping it with the first unsorted element. This process is repeated until all the elements are sorted.\n\nThe basic idea of selection sort is to divide the input list into two parts: the sorted part, which initially is empty, and the unsorted part. At each step of the algorithm, the minimum element from the unsorted part is selected and moved to the end of the sorted part.",
            "code": "#include <stdio.h>\n\n// Function to implement selection sort\nvoid selectionSort(int arr[], int n) {\n  \n  int i, j, min_idx; // Declare variables to be used in the for loops\n\n  // Loop through the array n-1 times\n  for (i = 0; i < n-1; i++) {\n    \n    min_idx = i; // Initialize the index of the minimum element as the current element\n\n    // Loop through the remaining unsorted elements to find the minimum element\n    for (j = i+1; j < n; j++) {\n      if (arr[j] < arr[min_idx]) {\n        min_idx = j; // Update the index of the minimum element\n      }\n    }\n\n    // Swap the current element with the minimum element\n    int temp = arr[min_idx];\n    arr[min_idx] = arr[i];\n    arr[i] = temp;\n  }\n}\n\nint main()\n{\n  int arr[5] = {20, 10, 30, 50, 40}; // Declare an array of integers\n\n  int n = sizeof(arr) / sizeof(arr[0]); // Get the number of elements in the array\n\n  printf(\"Original Array:\\n\"); // Print the original array\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n\n  selectionSort(arr, n); // Sort the array using selection sort\n\n  printf(\"Sorted Array:\\n\"); // Print the sorted array\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n\n  return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What is insertion sort?",
            "answer": "Insertion sort is a simple sorting algorithm in C that works by iterating over the array and placing each element in its correct position by shifting elements to the right. The algorithm starts with the second element of the array and compares it with the first element. If the second element is smaller than the first element, it is swapped with the first element. The process is repeated for the next elements, and the array is gradually sorted.\n\nThe basic idea of insertion sort is to maintain a sorted sublist in the lower positions of the array. Each new element is then inserted back into the previous sublist such that the sorted sublist is one element larger.",
            "code": "#include <stdio.h>\n\n// Function to implement insertion sort\nvoid insertionSort(int arr[], int n) {\n  \n  int i, key, j; // Declare variables to be used in the for loops\n\n  // Loop through the array n-1 times\n  for (i = 1; i < n; i++) {\n    key = arr[i]; // Store the current element in a separate variable\n\n    // Shift the elements that are greater than the current element\n    // to one position ahead of their current position\n    j = i - 1;\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j = j - 1;\n    }\n\n    // Insert the current element in its correct position\n    arr[j + 1] = key;\n  }\n}\n\nint main()\n{\n  int arr[5] = {20, 10, 30, 50, 40}; // Declare an array of integers\n\n  int n = sizeof(arr) / sizeof(arr[0]); // Get the number of elements in the array\n\n  printf(\"Original Array:\\n\"); // Print the original array\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n\n  insertionSort(arr, n); // Sort the array using insertion sort\n\n  printf(\"Sorted Array:\\n\"); // Print the sorted array\n  for (int i = 0; i < n; i++) {\n    printf(\"%d \", arr[i]);\n  }\n  printf(\"\\n\");\n\n  return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What is merge sort?",
            "answer": "Merge sort is a divide-and-conquer sorting algorithm in C that works by dividing the unsorted list into n sublists, each containing one element, and then repeatedly merging sublists to produce new sorted sublists until there is only one sublist remaining.\n\nThe basic idea of merge sort is to split the unsorted list into two halves, sort each half recursively, and then merge the two sorted halves back together to produce the final sorted list.\n\nThe advantage of merge sort over other sorting algorithms is its efficiency and stability. Merge sort has a time complexity of O(n log n) in the worst-case, making it one of the most efficient sorting algorithms. Additionally, merge sort is a stable sorting algorithm, meaning that it maintains the relative order of equal elements in the sorted list.",
            "code": "#include <stdio.h>\n\n// function to merge two arrays into a sorted one\nvoid merge(int arr[], int l, int m, int r)\n{\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 =  r - m;\n\n    // create temporary arrays\n    int L[n1], R[n2];\n\n    // copy data to temporary arrays L[] and R[]\n    for (i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[m + 1+ j];\n\n    // merge the temporary arrays back into arr[l..r]\n    i = 0;\n    j = 0;\n    k = l;\n    while (i < n1 && j < n2)\n    {\n        if (L[i] <= R[j])\n        {\n            arr[k] = L[i];\n            i++;\n        }\n        else\n        {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // copy the remaining elements of L[], if there are any\n    while (i < n1)\n    {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // copy the remaining elements of R[], if there are any\n    while (j < n2)\n    {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// main function that sorts arr[l..r] using merge()\nvoid mergeSort(int arr[], int l, int r)\n{\n    if (l < r)\n    {\n        int m = l+(r-l)/2;\n\n        // sort first and second halves\n        mergeSort(arr, l, m);\n        mergeSort(arr, m+1, r);\n\n        // merge the sorted halves\n        merge(arr, l, m, r);\n    }\n}\n\n// function to print an array\nvoid printArray(int A[], int size)\n{\n    int i;\n    for (i=0; i < size; i++)\n        printf(\"%d \", A[i]);\n    printf(\"\\n\");\n}\n\n// main function to test above functions\nint main()\n{\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int arr_size = sizeof(arr)/sizeof(arr[0]);\n\n    printf(\"Given array is \\n\");\n    printArray(arr, arr_size);\n\n    mergeSort(arr, 0, arr_size - 1);\n\n    printf(\"\\nSorted array is \\n\");\n    printArray(arr, arr_size);\n    return 0;\n}",
            "compile": false
        },
        {
            "question": "What is quick sort?",
            "answer": "Quick sort is a fast, recursive sorting algorithm that uses a divide-and-conquer approach. The basic idea behind quick sort is to choose a pivot element from the array and partition the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.",
            "code": "#include <stdio.h>\n\n// Function to swap two elements in an array\nvoid swap(int *a, int *b) {\n  int temp = *a;\n  *a = *b;\n  *b = temp;\n}\n\n// Partition function to divide the array into two sub-arrays\nint partition(int arr[], int low, int high) {\n  int pivot = arr[high]; // Select the pivot element\n  int i = (low - 1); // Index of the smaller element\n\n  // Loop through all elements in the array\n  for (int j = low; j <= high - 1; j++) {\n    // If the current element is smaller than or equal to the pivot\n    if (arr[j] <= pivot) {\n      i++; // Increment the index of the smaller element\n      swap(&arr[i], &arr[j]); // Swap the current element with the smaller element\n    }\n  }\n  swap(&arr[i + 1], &arr[high]); // Swap the pivot element with the element at index i + 1\n  return (i + 1); // Return the index of the pivot element\n}\n\n// Main function to sort an array using quick sort\nvoid quickSort(int arr[], int low, int high) {\n  if (low < high) {\n    int pi = partition(arr, low, high); // Get the partition index\n\n    // Sort the elements in the two sub-arrays\n    quickSort(arr, low, pi - 1);\n    quickSort(arr, pi + 1, high);\n  }\n}\n\n// Function to print an array\nvoid printArray(int arr[], int size) {\n  int i;\n  for (i = 0; i < size; i++)\n    printf(\"%d \", arr[i]);\n  printf(\"\\n\");\n}\n\n// Main function to test the quick sort implementation\nint main() {\n  int arr[] = {64, 34, 25, 12, 22, 11, 90};\n  int n = sizeof(arr) / sizeof(arr[0]);\n\n  printf(\"Given array is:\\n\");\n  printArray(arr, n);\n\n  quickSort(arr, 0, n - 1);\n\n  printf(\"\\nSorted array is:\\n\");\n  printArray(arr, n);\n  return 0;\n}\n",
            "compile": false
        },
        {
            "question": "What is a string?",
            "answer": "In the C programming language, a string is a sequence of characters terminated by a null character ('\\0'). The characters in a string are stored in contiguous memory locations, and a pointer to the first character of the string is used to represent the string as a whole. String functions are available in the C library to perform various operations on strings, such as concatenation, comparison, and extraction of substrings.\n\nC has a number of standard library functions for working with strings. Here are some of the most commonly used string functions:\n\n• strlen: Returns the length of a string (not including the null character)\n• strcpy: Copies one string to another\n• strcat: Concatenates two strings\n• strcmp: Compares two strings\n• strstr: Searches for a substring within a string\n• strchr: Searches for a character within a string\n• strtok: Tokenizes a string (splits it into substrings)\n\nAll of these functions are declared in the string.h header file.",
            "code": "#include <stdio.h>\n\nint main() {\n  char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};   \n  // This line declares an array of characters called \"greeting\"\n  // The size of the array is 6 characters\n  // The characters are \"H\", \"e\", \"l\", \"l\", \"o\", and \"\\0\"\n  // The \"\\0\" character is the null character and signals the end of the string\n\n  printf(\"Greeting message: %s\\n\", greeting);   \n  // The format specifier \"%s\" is used to indicate that a string is being printed\n\n  return 0; successfully\n}\n",
            "compile": false
        },
        {
            "question": "What is a strlen function?",
            "answer": "The strlen function is a standard library function in C that is used to determine the length of a string. It takes a single argument, which is a pointer to the string, and returns the number of characters in the string, excluding the null character ('\\0') that marks the end of the string.",
            "code": "#include <stdio.h>\n#include <string.h>  // This line includes the string library in the program\n\nint main() {\n  char greeting[20] = \"Hello, World!\";   // This line declares an array of characters called \"greeting\"\n                                         // The size of the array is 20 characters\n                                         // The characters are \"Hello, World!\" and a null character ('\\0')\n\n  int length = strlen(greeting);         // This line uses the strlen function to determine the length of the \"greeting\" string\n                                         // The length of the string is stored in the \"length\" variable\n\n  printf(\"Length of the greeting: %d\\n\", length);   // This line uses the printf function to print the string \"Length of the greeting: \" followed by the value of the \"length\" variable\n\n  return 0;   // This line returns the value 0 to indicate that the program has completed successfully\n}\n",
            "compile": false
        },
        {
            "question": "What is a strcpy function?",
            "answer": "The strcpy function is a standard library function in C that is used to copy one string to another. It takes two arguments: a destination string and a source string. The strcpy function copies the characters from the source string to the destination string, including the null character ('\\0') that marks the end of the string.",
            "code": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n  char source[20] = \"Hello, World!\";\n  char destination[20];\n\n  strcpy(destination, source);   // strcpy function copies the source string to the destination string\n\n  printf(\"Destination string: %s\\n\", destination);\n\n  return 0;\n}",
            "compile": false
        },
        {
            "question": "What is a strcat function?",
            "answer": "strcat() is a standard library function in the C programming language that concatenates two strings. It takes two arguments, both of which are pointers to a null-terminated string, and appends the contents of the second string to the end of the first, overwriting the terminating null character of the first string. The modified first string is then returned as the result of the function.",
            "code": "#include <stdio.h>\n#include <string.h> // include the string library for strcat function\n\nint main() {\n    char first_string[100] = \"Hello\"; // initialize the first string with \"Hello\"\n    /* initialize the second string with \" World!\" */\n    char second_string[100] = \" World!\"; \n\n    /* \n    Concatenate the second string to the end of the first string.\n    The strcat function takes two arguments:\n      - The first argument is the destination string, where the concatenated string will be stored.\n      - The second argument is the source string, which will be added to the end of the destination string.\n    */\n    strcat(first_string, second_string); \n\n    /* \n    Print the concatenated string to the console.\n    The format specifier %s is used to print strings.\n    */\n    printf(\"The concatenated string is: %s\\n\", first_string); \n\n    return 0; // Return 0 to indicate successful program execution\n}",
            "compile": false
        },
        {
            "question": "What is a strcmp function?",
            "answer": "strcmp() is a standard library function in the C programming language that compares two strings. It takes two arguments, both of which are pointers to a null-terminated string, and returns an integer that indicates their lexicographical order.\n\nIf the two strings are equal, strcmp() returns 0. If the first string is lexicographically greater than the second, it returns a positive integer. If the first string is lexicographically less than the second, it returns a negative integer.",
            "code": "#include <stdio.h>\n#include <string.h> // include the string library for strcmp function\n\nint main() {\n    char first_string[100] = \"hello\"; // initialize the first string with \"hello\"\n    /* initialize the second string with \"world\" */\n    char second_string[100] = \"world\"; \n\n    /* \n    Compare the two strings using the strcmp function.\n    The strcmp function returns:\n      - 0 if the strings are equal\n      - a negative value if the first string is lexicographically less than the second\n      - a positive value if the first string is lexicographically greater than the second\n    */\n    int result = strcmp(first_string, second_string); \n\n    /* \n    Check the result of the comparison and print a message indicating the result. \n    */\n    if (result == 0) {\n        printf(\"The strings are equal.\\n\");\n    } else if (result < 0) {\n        printf(\"The first string is lexicographically less than the second.\\n\");\n    } else {\n        printf(\"The first string is lexicographically greater than the second.\\n\");\n    }\n\n    return 0; // Return 0 to indicate successful program execution\n}",
            "compile": false
        },
        {
            "question": "What is a strstr function?",
            "answer": "strstr() is a standard library function in the C programming language that searches for a substring within a string. It takes two arguments, the first of which is a pointer to the string being searched, and the second of which is a pointer to the substring to be searched for. If the substring is found within the string, a pointer to the first occurrence of the substring within the string is returned. If the substring is not found, a null pointer is returned.",
            "code": "#include <stdio.h>\n#include <string.h> // include the string library for strstr function\n\nint main() {\n    char first_string[100] = \"Hello World!\"; // initialize the first string with \"Hello World!\"\n    /* initialize the second string with \"World\" */\n    char second_string[100] = \"World\"; \n\n    /* \n    Search for the second string in the first string using the strstr function.\n    The strstr function returns a pointer to the first occurrence of the second string in the first string,\n    or a null pointer if the second string is not found in the first string.\n    */\n    char *result = strstr(first_string, second_string); \n\n    /* \n    Check if the second string was found in the first string and print a message indicating the result. \n    */\n    if (result == NULL) {\n        printf(\"The second string was not found in the first string.\\n\");\n    } else {\n        printf(\"The second string was found in the first string starting at position %ld.\\n\", result - first_string);\n    }\n\n    return 0; // Return 0 to indicate successful program execution\n}\n",
            "compile": false
        },
        {
            "question": "What is a strchr function?",
            "answer": "strchr() is a standard library function in the C programming language that searches for the first occurrence of a character in a string. It takes two arguments, the first of which is a pointer to the string being searched, and the second of which is the character being searched for. If the character is found within the string, a pointer to the first occurrence of the character within the string is returned. If the character is not found, a null pointer is returned.",
            "code": "#include <stdio.h>\n#include <string.h> // include the string library for strchr function\n\nint main() {\n    char first_string[100] = \"Hello World!\"; // initialize the first string with \"Hello World!\"\n    char target_char = 'o'; // initialize the target character with 'o'\n\n    /* \n    Search for the target character in the first string using the strchr function.\n    The strchr function returns a pointer to the first occurrence of the target character in the first string,\n    or a null pointer if the target character is not found in the first string.\n    */\n    char *result = strchr(first_string, target_char); \n\n    /* \n    Check if the target character was found in the first string and print a message indicating the result. \n    */\n    if (result == NULL) {\n        printf(\"The target character was not found in the first string.\\n\");\n    } else {\n        printf(\"The target character was found in the first string starting at position %ld.\\n\", result - first_string);\n    }\n\n    return 0; // Return 0 to indicate successful program execution\n}",
            "compile": false
        },
        {
            "question": "What is a strtok function?",
            "answer": "strtok() is a standard library function in the C programming language that splits a string into tokens. It takes two arguments, the first of which is a pointer to the string to be parsed, and the second of which is a string containing a set of delimiter characters. strtok() returns a pointer to the next token in the string, and replaces the delimiter character with a null character to delimit the token. Subsequent calls to strtok() using a null pointer as the first argument continue parsing the string from the last delimiter found.",
            "code": "#include <stdio.h>\n#include <string.h> // include the string library for strtok function\n\nint main() {\n    char first_string[100] = \"Hello, World! How are you today?\"; // initialize the first string with \"Hello, World! How are you today?\"\n    char delimiters[10] = \", !\"; // initialize the delimiter characters with \", !\"\n\n    /* \n    Get the first token from the first string using the strtok function.\n    The strtok function tokenizes a string into substrings, using the specified delimiter characters.\n    The first call to strtok should pass the string to be tokenized as its first argument.\n    Subsequent calls to strtok should pass NULL as the first argument.\n    */\n    char *token = strtok(first_string, delimiters); \n\n    /* \n    Print all the tokens in the first string, one by one, until there are no more tokens left in the string. \n    */\n    while (token != NULL) {\n        printf(\"Token: %s\\n\", token);\n        token = strtok(NULL, delimiters);\n    }\n\n    return 0; // Return 0 to indicate successful program execution\n}",
            "compile": false
        }
    ]
}